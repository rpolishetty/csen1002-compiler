
import java_cup.runtime.Symbol;
%%
%class Lexer

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF, null);
%eofval}

%line
%char
%state ONELINECOMMENTS
%state MANYLINECOMMENTS
%state STRING

ALPHA=[A-Za-z_]

DIGIT=[0-9]

ALPHA_NUMERIC={ALPHA}|{DIGIT}

KEYWORD=class|else|if|int|float|boolean|String|return|static|while

BOOLEAN=true|false 

IDENT={ALPHA}({ALPHA_NUMERIC})*

NUMBER=(({DIGIT})+)|(({DIGIT})+.({DIGIT})+)

NUMBERINT=(({DIGIT})+)

NUMBERFLOAT=(({DIGIT})+.({DIGIT})+)

WHITE_SPACE=([\ \n\b\r\t\f])+

STRING=(\"({ALPHA_NUMERIC}|[\ \b\t\f]|{NUMBER}|[;,(){}=+-*/%!|&'\\])*\")

STRINGERROR=(\"({ALPHA_NUMERIC}|[\ \b\t\f]|{NUMBER}|[;,(){}=+-*/%!|&'\\])*)

%%
<YYINITIAL> {STRING} { 
  return new Symbol(sym.ST, yytext());
}
<YYINITIAL> {STRINGERROR} { 
  return new Symbol(sym.InvalidString, yytext());
}
<YYINITIAL> {NUMBERINT} { 
  int number = 0;
	for(int k=yy_buffer_start;k < yy_buffer_end; k++){
		number *= 10;
		number += yy_buffer[k]-'0';
	}
  return new Symbol(sym.NM,  "" + number);
}
<YYINITIAL> {NUMBERFLOAT} {
	float floatNumber = 0;
	float decimalPoint = 0;
	for(int k=yy_buffer_start;k < yy_buffer_end; k++){
		if(yy_buffer[k] == '.'){
			decimalPoint=10;
			continue;
		}else if(decimalPoint>=10){
			floatNumber += (yy_buffer[k]-'0')/decimalPoint;
			decimalPoint*=10;
		}else{
			floatNumber *= 10;
			floatNumber += yy_buffer[k]-'0';
		}
	}
  return new Symbol(sym.NM,  "" + floatNumber);
}
<YYINITIAL> {KEYWORD} { 
  return new Symbol(sym.KW, yytext());
}
<YYINITIAL> {BOOLEAN} { 
  return new Symbol(sym.BL, yytext());
}
<YYINITIAL> {IDENT} { 
  return new Symbol(sym.ID, yytext());
}
<YYINITIAL> {WHITE_SPACE} { }
<YYINITIAL> ";" { 
  return new Symbol(sym.SM, ";");
} 
<YYINITIAL> "," { 
  return new Symbol(sym.FA, ","); 
} 
<YYINITIAL> "(" { 
  return new Symbol(sym.LP, "(");
} 
<YYINITIAL> ")" { 
  return new Symbol(sym.RP, ")"); 
} 
<YYINITIAL> "{" { 
  return new Symbol(sym.LB, "{");
} 
<YYINITIAL> "}" { 
  return new Symbol(sym.RB, "}");
} 
<YYINITIAL> "=" { 
  return new Symbol(sym.AO, "="); 
} 
<YYINITIAL> "+" { 
  return new Symbol(sym.PO, "+"); 
} 
<YYINITIAL> "-" { 
  return new Symbol(sym.MO, "-");
} 
<YYINITIAL> "*" { 
  return new Symbol(sym.TO, "*");
} 
<YYINITIAL> "/" { 
  return new Symbol(sym.DO, "/");
} 
<YYINITIAL> "%" { 
  return new Symbol(sym.MD, "%");
} 
<YYINITIAL> "==" { 
  return new Symbol(sym.EQ, "==");
} 
<YYINITIAL> "!=" { 
  return new Symbol(sym.NE, "!=");
} 
<YYINITIAL> "||" { 
  return new Symbol(sym.LO, "||"); 
} 
<YYINITIAL> "&&" { 
  return new Symbol(sym.LA, "&&");
}  
<YYINITIAL> "//" {
  yybegin(ONELINECOMMENTS);
}
<YYINITIAL> "/*" {
  yybegin(MANYLINECOMMENTS);
}
<MANYLINECOMMENTS> [^*/] {
}
<MANYLINECOMMENTS> "*/" {
  yybegin(YYINITIAL);
}
<ONELINECOMMENTS> [^\n] {
}
<ONELINECOMMENTS> [\n] {
  yybegin(YYINITIAL);
}
<YYINITIAL> . {
  return new Symbol(sym.InvalidInput, yytext());
}

