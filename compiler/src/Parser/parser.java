
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Apr 21 16:56:35 EET 2012
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sat Apr 21 16:56:35 EET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\003\007\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\005\011" +
    "\000\002\007\003\000\002\007\002\000\002\011\005\000" +
    "\002\011\003\000\002\012\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\010" +
    "\005\000\002\013\004\000\002\013\002\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\005\000\002" +
    "\016\006\000\002\032\010\000\002\033\004\000\002\033" +
    "\002\000\002\017\007\000\002\020\005\000\002\021\003" +
    "\000\002\021\005\000\002\022\003\000\002\022\005\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\024\003\000\002\024\005\000\002\024\005\000\002\025" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\005\000\002" +
    "\027\006\000\002\030\003\000\002\030\002\000\002\031" +
    "\005\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\003\005\037\006\001\002\000\004\002" +
    "\144\001\002\000\004\002\uffff\001\002\000\004\014\007" +
    "\001\002\000\004\016\010\001\002\000\006\025\ufffd\034" +
    "\ufffd\001\002\000\006\025\014\034\013\001\002\000\006" +
    "\025\ufffe\034\ufffe\001\002\000\012\030\021\031\017\032" +
    "\020\033\015\001\002\000\004\002\001\001\002\000\004" +
    "\014\ufff3\001\002\000\004\014\022\001\002\000\004\014" +
    "\ufff5\001\002\000\004\014\ufff4\001\002\000\004\014\ufff6" +
    "\001\002\000\004\026\023\001\002\000\014\027\ufffa\030" +
    "\021\031\017\032\020\033\015\001\002\000\006\015\142" +
    "\027\ufffb\001\002\000\004\014\141\001\002\000\004\027" +
    "\030\001\002\000\006\015\ufff8\027\ufff8\001\002\000\004" +
    "\016\031\001\002\000\026\014\ufff0\016\ufff0\025\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\035\ufff0\036\ufff0\040\ufff0" +
    "\001\002\000\006\025\ufffc\034\ufffc\001\002\000\026\014" +
    "\042\016\031\025\044\030\021\031\017\032\020\033\015" +
    "\035\036\036\037\040\040\001\002\000\026\014\ufff1\016" +
    "\ufff1\025\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\035\ufff1" +
    "\036\ufff1\040\ufff1\001\002\000\004\014\137\001\002\000" +
    "\004\026\133\001\002\000\014\011\064\012\055\013\056" +
    "\014\063\026\053\001\002\000\004\026\122\001\002\000" +
    "\030\014\uffef\016\uffef\025\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\035\uffef\036\uffef\040\uffef\041\uffef\001\002\000" +
    "\004\024\051\001\002\000\030\014\uffee\016\uffee\025\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\035\uffee\036\uffee\040" +
    "\uffee\041\uffee\001\002\000\032\014\ufff2\016\ufff2\025\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\040\ufff2\041\ufff2\001\002\000\030\014\uffeb\016\uffeb" +
    "\025\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\036" +
    "\uffeb\040\uffeb\041\uffeb\001\002\000\030\014\uffea\016\uffea" +
    "\025\uffea\030\uffea\031\uffea\032\uffea\033\uffea\035\uffea\036" +
    "\uffea\040\uffea\041\uffea\001\002\000\030\014\uffed\016\uffed" +
    "\025\uffed\030\uffed\031\uffed\032\uffed\033\uffed\035\uffed\036" +
    "\uffed\040\uffed\041\uffed\001\002\000\030\014\uffec\016\uffec" +
    "\025\uffec\030\uffec\031\uffec\032\uffec\033\uffec\035\uffec\036" +
    "\uffec\040\uffec\041\uffec\001\002\000\014\011\064\012\055" +
    "\013\056\014\063\026\053\001\002\000\014\004\uffe2\015" +
    "\uffe2\017\uffe2\020\107\027\uffe2\001\002\000\014\011\064" +
    "\012\055\013\056\014\063\026\053\001\002\000\032\004" +
    "\uffdb\005\uffdb\006\uffdb\007\071\010\072\015\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\073\027\uffdb\001\002\000" +
    "\032\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\015\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\027\uffd2\001" +
    "\002\000\032\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\027" +
    "\uffd4\001\002\000\032\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\027\uffd8\001\002\000\020\004\uffe0\015\uffe0\017\uffe0" +
    "\020\uffe0\021\111\022\112\027\uffe0\001\002\000\032\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\015\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\027\uffd0\001\002\000" +
    "\006\004\117\017\105\001\002\000\034\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\015\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\026\100\027\uffd1\001\002\000\032" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\015\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\027\uffd3\001\002" +
    "\000\024\004\uffde\005\066\006\067\015\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\027\uffde\001\002\000\014\011\064" +
    "\012\055\013\056\014\063\026\053\001\002\000\014\011" +
    "\064\012\055\013\056\014\063\026\053\001\002\000\032" +
    "\004\uffd9\005\uffd9\006\uffd9\007\071\010\072\015\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\073\027\uffd9\001\002" +
    "\000\014\011\064\012\055\013\056\014\063\026\053\001" +
    "\002\000\014\011\064\012\055\013\056\014\063\026\053" +
    "\001\002\000\014\011\064\012\055\013\056\014\063\026" +
    "\053\001\002\000\032\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\027\uffd5\001\002\000\032\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\027\uffd6\001\002\000\032\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\015\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\027\uffd7\001\002\000\032\004\uffda" +
    "\005\uffda\006\uffda\007\071\010\072\015\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\073\027\uffda\001\002\000\016" +
    "\011\064\012\055\013\056\014\063\026\053\027\uffcc\001" +
    "\002\000\006\015\115\027\uffcd\001\002\000\010\015\uffca" +
    "\017\105\027\uffca\001\002\000\004\027\104\001\002\000" +
    "\032\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\015\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\027\uffce\001" +
    "\002\000\014\011\064\012\055\013\056\014\063\026\053" +
    "\001\002\000\014\004\uffe1\015\uffe1\017\uffe1\020\107\027" +
    "\uffe1\001\002\000\014\011\064\012\055\013\056\014\063" +
    "\026\053\001\002\000\020\004\uffdf\015\uffdf\017\uffdf\020" +
    "\uffdf\021\111\022\112\027\uffdf\001\002\000\014\011\064" +
    "\012\055\013\056\014\063\026\053\001\002\000\014\011" +
    "\064\012\055\013\056\014\063\026\053\001\002\000\024" +
    "\004\uffdc\005\066\006\067\015\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\027\uffdc\001\002\000\024\004\uffdd\005\066" +
    "\006\067\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\027" +
    "\uffdd\001\002\000\014\011\064\012\055\013\056\014\063" +
    "\026\053\001\002\000\010\015\uffcb\017\105\027\uffcb\001" +
    "\002\000\030\014\uffe8\016\uffe8\025\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\001" +
    "\002\000\006\017\105\027\121\001\002\000\032\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\015\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\027\uffcf\001\002\000\014" +
    "\011\064\012\055\013\056\014\063\026\053\001\002\000" +
    "\006\017\105\027\124\001\002\000\024\014\042\016\031" +
    "\030\021\031\017\032\020\033\015\035\036\036\037\040" +
    "\040\001\002\000\030\014\uffe5\016\uffe5\025\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041" +
    "\126\001\002\000\024\014\042\016\031\030\021\031\017" +
    "\032\020\033\015\035\036\036\037\040\040\001\002\000" +
    "\030\014\uffe7\016\uffe7\025\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7\001\002\000" +
    "\030\014\uffe6\016\uffe6\025\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\001\002\000" +
    "\006\004\132\017\105\001\002\000\030\014\uffe3\016\uffe3" +
    "\025\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\036" +
    "\uffe3\040\uffe3\041\uffe3\001\002\000\014\011\064\012\055" +
    "\013\056\014\063\026\053\001\002\000\006\017\105\027" +
    "\135\001\002\000\024\014\042\016\031\030\021\031\017" +
    "\032\020\033\015\035\036\036\037\040\040\001\002\000" +
    "\030\014\uffe4\016\uffe4\025\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\001\002\000" +
    "\004\004\140\001\002\000\030\014\uffe9\016\uffe9\025\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9\036\uffe9\040" +
    "\uffe9\041\uffe9\001\002\000\006\015\ufff7\027\ufff7\001\002" +
    "\000\012\030\021\031\017\032\020\033\015\001\002\000" +
    "\006\015\ufff9\027\ufff9\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\010\001\001\000\004\005\011\001\001\000\002\001" +
    "\001\000\004\006\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\024" +
    "\007\025\011\023\012\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\031\001\001\000\004\013\032\001\001\000\002\001" +
    "\001\000\022\006\034\010\040\014\033\015\042\016\046" +
    "\017\044\020\045\032\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\130\022\051" +
    "\023\057\024\064\025\053\026\056\027\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\061" +
    "\022\051\023\057\024\064\025\053\026\056\027\060\001" +
    "\001\000\002\001\001\000\020\021\117\022\051\023\057" +
    "\024\064\025\053\026\056\027\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\076\026\056\027\060\001\001\000\010\025\067\026" +
    "\056\027\060\001\001\000\002\001\001\000\006\026\075" +
    "\027\060\001\001\000\006\026\074\027\060\001\001\000" +
    "\006\026\073\027\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\021" +
    "\101\022\051\023\057\024\064\025\053\026\056\027\060" +
    "\030\102\031\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\105" +
    "\023\057\024\064\025\053\026\056\027\060\001\001\000" +
    "\002\001\001\000\014\023\107\024\064\025\053\026\056" +
    "\027\060\001\001\000\002\001\001\000\012\024\113\025" +
    "\053\026\056\027\060\001\001\000\012\024\112\025\053" +
    "\026\056\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\115\022\051\023\057\024\064\025\053" +
    "\026\056\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\122" +
    "\022\051\023\057\024\064\025\053\026\056\027\060\001" +
    "\001\000\002\001\001\000\022\006\034\010\040\014\124" +
    "\015\042\016\046\017\044\020\045\032\047\001\001\000" +
    "\004\033\126\001\001\000\022\006\034\010\040\014\127" +
    "\015\042\016\046\017\044\020\045\032\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\133\022\051\023\057\024\064\025" +
    "\053\026\056\027\060\001\001\000\002\001\001\000\022" +
    "\006\034\010\040\014\135\015\042\016\046\017\044\020" +
    "\045\032\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\024\012" +
    "\142\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // properActualParams ::= expression 
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(23/*properActualParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // properActualParams ::= properActualParams FA expression 
            {
              Boolean RESULT = null;
		int papleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int papright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean pap = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = pap && e;
              CUP$parser$result = new java_cup.runtime.Symbol(23/*properActualParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // actualParams ::= 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(22/*actualParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // actualParams ::= properActualParams 
            {
              Boolean RESULT = null;
		int papleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int papright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean pap = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = pap;
              CUP$parser$result = new java_cup.runtime.Symbol(22/*actualParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // callExpr ::= ID LP actualParams RP 
            {
              Boolean RESULT = null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean ap = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ap;
              CUP$parser$result = new java_cup.runtime.Symbol(21/*callExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primaryExpr ::= LP expression RP 
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(20/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primaryExpr ::= callExpr 
            {
              Boolean RESULT = null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean ce = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ce;
              CUP$parser$result = new java_cup.runtime.Symbol(20/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primaryExpr ::= ID 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(20/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primaryExpr ::= ST 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(20/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primaryExpr ::= BL 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(20/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // primaryExpr ::= NM 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(20/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // multiplicativeExpr ::= multiplicativeExpr MD primaryExpr 
            {
              Boolean RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean me = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean pe = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = me && pe;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*multiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // multiplicativeExpr ::= multiplicativeExpr DO primaryExpr 
            {
              Boolean RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean me = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean pe = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = me && pe;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*multiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // multiplicativeExpr ::= multiplicativeExpr TO primaryExpr 
            {
              Boolean RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean me = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean pe = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = me && pe;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*multiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // multiplicativeExpr ::= primaryExpr 
            {
              Boolean RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean pe = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = pe;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*multiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // additiveExpr ::= additiveExpr MO multiplicativeExpr 
            {
              Boolean RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean ae = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean me = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = me && ae;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*additiveExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // additiveExpr ::= additiveExpr PO multiplicativeExpr 
            {
              Boolean RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean ae = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean me = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = me && ae;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*additiveExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // additiveExpr ::= multiplicativeExpr 
            {
              Boolean RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean me = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = me;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*additiveExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // equalityExpr ::= equalityExpr NE additiveExpr 
            {
              Boolean RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean ee = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean ae = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ee && ae;
              CUP$parser$result = new java_cup.runtime.Symbol(17/*equalityExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // equalityExpr ::= equalityExpr EQ additiveExpr 
            {
              Boolean RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean ee = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean ae = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ee && ae;
              CUP$parser$result = new java_cup.runtime.Symbol(17/*equalityExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // equalityExpr ::= additiveExpr 
            {
              Boolean RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean ae = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ae;
              CUP$parser$result = new java_cup.runtime.Symbol(17/*equalityExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conditionalAndExpr ::= conditionalAndExpr LA equalityExpr 
            {
              Boolean RESULT = null;
		int caeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int caeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean cae = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean ee = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ee && cae;
              CUP$parser$result = new java_cup.runtime.Symbol(16/*conditionalAndExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conditionalAndExpr ::= equalityExpr 
            {
              Boolean RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean ee = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ee;
              CUP$parser$result = new java_cup.runtime.Symbol(16/*conditionalAndExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression LO conditionalAndExpr 
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int caeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int caeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean cae = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = e && cae;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= conditionalAndExpr 
            {
              Boolean RESULT = null;
		int caeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int caeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean cae = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = cae;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // returnStmt ::= RETURN expression SM 
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*returnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // whileStmt ::= WHILE LP expression RP statement 
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = e && s;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*whileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ifStmt1 ::= 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ifStmt1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifStmt1 ::= ELSE statement 
            {
              Boolean RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = s;
              CUP$parser$result = new java_cup.runtime.Symbol(25/*ifStmt1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ifStmt ::= IF LP expression RP statement ifStmt1 
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int is1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int is1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean is1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = e && s && is1;
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ifStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignStmt ::= ID AO expression SM 
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(12/*assignStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // localVarDecl ::= type ID SM 
            {
              Boolean RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = t;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*localVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= returnStmt 
            {
              Boolean RESULT = null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean rs = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = rs;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= whileStmt 
            {
              Boolean RESULT = null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean ws = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ws;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= ifStmt 
            {
              Boolean RESULT = null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean is = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = is;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= assignStmt 
            {
              Boolean RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean as = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = as;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= localVarDecl 
            {
              Boolean RESULT = null;
		int lvrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean lvr = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = lvr;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= block 
            {
              Boolean RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = b;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements ::= 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(9/*statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statements ::= statements statement 
            {
              Boolean RESULT = null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean sts = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean st = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = sts && st;
              CUP$parser$result = new java_cup.runtime.Symbol(9/*statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block ::= LB statements RB 
            {
              Boolean RESULT = null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean sts = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = sts;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= STRING 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= BOOLEAN 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= FLOAT 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= INT 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formalParam ::= type ID 
            {
              Boolean RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = t;
              CUP$parser$result = new java_cup.runtime.Symbol(8/*formalParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // properFormalParams ::= formalParam 
            {
              Boolean RESULT = null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean fp = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = fp;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*properFormalParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // properFormalParams ::= properFormalParams FA formalParam 
            {
              Boolean RESULT = null;
		int pfpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pfpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean pfp = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean fp = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = pfp && fp;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*properFormalParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formalParams ::= 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(5/*formalParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formalParams ::= properFormalParams 
            {
              Boolean RESULT = null;
		int pfpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pfpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean pfp = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = pfp;
              CUP$parser$result = new java_cup.runtime.Symbol(5/*formalParams*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // methodDecl ::= STATIC type ID LP formalParams RP block 
            {
              Boolean RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean fps = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = t && fps && b;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // methodDecls ::= 
            {
              Boolean RESULT = null;
		RESULT = true;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*methodDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // methodDecls ::= methodDecls methodDecl 
            {
              Boolean RESULT = null;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean mds = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean md = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = mds && md;
              CUP$parser$result = new java_cup.runtime.Symbol(2/*methodDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classDecl ::= error 
            {
              Boolean RESULT = null;
		RESULT = false;
              CUP$parser$result = new java_cup.runtime.Symbol(1/*classDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= classDecl EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean start_val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // classDecl ::= CLASS ID LB methodDecls RB 
            {
              Boolean RESULT = null;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean mds = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mds;
              CUP$parser$result = new java_cup.runtime.Symbol(1/*classDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

