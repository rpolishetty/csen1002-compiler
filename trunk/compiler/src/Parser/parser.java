
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 09 20:25:39 EET 2012
//----------------------------------------------------

package Parser;

import java.util.ArrayList;
import ParserObjects.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 09 20:25:39 EET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\007\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\004\011" +
    "\000\002\005\003\000\002\005\002\000\002\006\005\000" +
    "\002\006\003\000\002\007\004\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\005\000\002\012\004\000\002\012\002\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\005\000\002" +
    "\015\006\000\002\016\007\000\002\016\011\000\002\017" +
    "\007\000\002\020\005\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\005\000\002\027\006\000\002" +
    "\030\003\000\002\030\002\000\002\031\005\000\002\031" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\003\005\027\006\001\002\000\004\002" +
    "\143\001\002\000\004\002\uffff\001\002\000\004\032\007" +
    "\001\002\000\004\012\010\001\002\000\006\021\ufffd\024" +
    "\ufffd\001\002\000\006\021\014\024\013\001\002\000\006" +
    "\021\ufffe\024\ufffe\001\002\000\012\033\021\034\017\035" +
    "\020\036\015\001\002\000\004\002\001\001\002\000\004" +
    "\032\ufff3\001\002\000\004\032\022\001\002\000\004\032" +
    "\ufff5\001\002\000\004\032\ufff4\001\002\000\004\032\ufff6" +
    "\001\002\000\004\022\023\001\002\000\014\023\ufffa\033" +
    "\021\034\017\035\020\036\015\001\002\000\006\011\141" +
    "\023\ufffb\001\002\000\004\032\140\001\002\000\004\023" +
    "\030\001\002\000\006\011\ufff8\023\ufff8\001\002\000\004" +
    "\012\031\001\002\000\026\012\ufff0\021\ufff0\025\ufff0\026" +
    "\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\001\002\000\006\021\ufffc\024\ufffc\001\002\000\026\012" +
    "\031\021\044\025\036\026\037\030\040\032\042\033\021" +
    "\034\017\035\020\036\015\001\002\000\026\012\ufff1\021" +
    "\ufff1\025\ufff1\026\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\001\002\000\004\032\136\001\002\000" +
    "\004\022\132\001\002\000\014\022\053\032\063\037\055" +
    "\040\056\041\064\001\002\000\004\022\122\001\002\000" +
    "\030\012\uffef\021\uffef\025\uffef\026\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\001\002\000" +
    "\004\020\051\001\002\000\030\012\uffee\021\uffee\025\uffee" +
    "\026\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\001\002\000\032\012\ufff2\021\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\001\002\000\030\012\uffeb\021\uffeb" +
    "\025\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\001\002\000\030\012\uffea\021\uffea" +
    "\025\uffea\026\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\001\002\000\030\012\uffed\021\uffed" +
    "\025\uffed\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\001\002\000\030\012\uffec\021\uffec" +
    "\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\001\002\000\014\022\053\032\063" +
    "\037\055\040\056\041\064\001\002\000\014\004\uffe2\011" +
    "\uffe2\013\uffe2\014\107\023\uffe2\001\002\000\014\022\053" +
    "\032\063\037\055\040\056\041\064\001\002\000\032\004" +
    "\uffda\005\uffda\006\uffda\007\071\010\072\011\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\073\023\uffda\001\002\000" +
    "\032\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\023\uffd3\001" +
    "\002\000\032\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\023" +
    "\uffd5\001\002\000\032\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\023\uffd6\001\002\000\020\004\uffe0\011\uffe0\013\uffe0" +
    "\014\uffe0\015\111\016\112\023\uffe0\001\002\000\006\004" +
    "\117\013\105\001\002\000\032\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\023\uffd1\001\002\000\034\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\022\100\023\uffd2\001\002\000\032" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\023\uffd4\001\002" +
    "\000\024\004\uffdd\005\066\006\067\011\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\023\uffdd\001\002\000\014\022\053" +
    "\032\063\037\055\040\056\041\064\001\002\000\014\022" +
    "\053\032\063\037\055\040\056\041\064\001\002\000\032" +
    "\004\uffdb\005\uffdb\006\uffdb\007\071\010\072\011\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\073\023\uffdb\001\002" +
    "\000\014\022\053\032\063\037\055\040\056\041\064\001" +
    "\002\000\014\022\053\032\063\037\055\040\056\041\064" +
    "\001\002\000\014\022\053\032\063\037\055\040\056\041" +
    "\064\001\002\000\032\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\023\uffd7\001\002\000\032\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\023\uffd8\001\002\000\032\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\023\uffd9\001\002\000\032\004\uffdc" +
    "\005\uffdc\006\uffdc\007\071\010\072\011\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\073\023\uffdc\001\002\000\016" +
    "\022\053\023\uffcd\032\063\037\055\040\056\041\064\001" +
    "\002\000\006\011\115\023\uffce\001\002\000\010\011\uffcb" +
    "\013\105\023\uffcb\001\002\000\004\023\104\001\002\000" +
    "\032\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\023\uffcf\001" +
    "\002\000\014\022\053\032\063\037\055\040\056\041\064" +
    "\001\002\000\014\004\uffe3\011\uffe3\013\uffe3\014\107\023" +
    "\uffe3\001\002\000\014\022\053\032\063\037\055\040\056" +
    "\041\064\001\002\000\020\004\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\015\111\016\112\023\uffe1\001\002\000\014\022\053" +
    "\032\063\037\055\040\056\041\064\001\002\000\014\022" +
    "\053\032\063\037\055\040\056\041\064\001\002\000\024" +
    "\004\uffde\005\066\006\067\011\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\023\uffde\001\002\000\024\004\uffdf\005\066" +
    "\006\067\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\023" +
    "\uffdf\001\002\000\014\022\053\032\063\037\055\040\056" +
    "\041\064\001\002\000\010\011\uffcc\013\105\023\uffcc\001" +
    "\002\000\030\012\uffe8\021\uffe8\025\uffe8\026\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\001" +
    "\002\000\006\013\105\023\121\001\002\000\032\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\023\uffd0\001\002\000\014" +
    "\022\053\032\063\037\055\040\056\041\064\001\002\000" +
    "\006\013\105\023\124\001\002\000\024\012\031\025\036" +
    "\026\037\030\040\032\042\033\021\034\017\035\020\036" +
    "\015\001\002\000\030\012\uffe7\021\uffe7\025\uffe7\026\uffe7" +
    "\030\uffe7\031\126\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\001\002\000\024\012\031\025\036\026\037\030\040" +
    "\032\042\033\021\034\017\035\020\036\015\001\002\000" +
    "\030\012\uffe6\021\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\001\002\000" +
    "\006\004\131\013\105\001\002\000\030\012\uffe4\021\uffe4" +
    "\025\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\001\002\000\014\022\053\032\063" +
    "\037\055\040\056\041\064\001\002\000\006\013\105\023" +
    "\134\001\002\000\024\012\031\025\036\026\037\030\040" +
    "\032\042\033\021\034\017\035\020\036\015\001\002\000" +
    "\030\012\uffe5\021\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002\000" +
    "\004\004\137\001\002\000\030\012\uffe9\021\uffe9\025\uffe9" +
    "\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\001\002\000\006\011\ufff7\023\ufff7\001\002" +
    "\000\012\033\021\034\017\035\020\036\015\001\002\000" +
    "\006\011\ufff9\023\ufff9\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\004\004\011\001\001\000\002\001" +
    "\001\000\004\010\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\025" +
    "\006\023\007\026\010\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\031\001\001\000\004\012\032\001\001\000\002\001" +
    "\001\000\022\010\034\011\040\013\033\014\042\015\046" +
    "\016\047\017\044\020\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\127\022\051" +
    "\023\057\024\064\025\053\026\056\027\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\060" +
    "\022\051\023\057\024\064\025\053\026\056\027\061\001" +
    "\001\000\002\001\001\000\020\021\117\022\051\023\057" +
    "\024\064\025\053\026\056\027\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\076\026\056\027\061\001\001\000\010\025\067\026" +
    "\056\027\061\001\001\000\002\001\001\000\006\026\075" +
    "\027\061\001\001\000\006\026\074\027\061\001\001\000" +
    "\006\026\073\027\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\021" +
    "\101\022\051\023\057\024\064\025\053\026\056\027\061" +
    "\030\102\031\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\105" +
    "\023\057\024\064\025\053\026\056\027\061\001\001\000" +
    "\002\001\001\000\014\023\107\024\064\025\053\026\056" +
    "\027\061\001\001\000\002\001\001\000\012\024\113\025" +
    "\053\026\056\027\061\001\001\000\012\024\112\025\053" +
    "\026\056\027\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\115\022\051\023\057\024\064\025\053" +
    "\026\056\027\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\122" +
    "\022\051\023\057\024\064\025\053\026\056\027\061\001" +
    "\001\000\002\001\001\000\022\010\034\011\040\013\124" +
    "\014\042\015\046\016\047\017\044\020\045\001\001\000" +
    "\002\001\001\000\022\010\034\011\040\013\126\014\042" +
    "\015\046\016\047\017\044\020\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\132" +
    "\022\051\023\057\024\064\025\053\026\056\027\061\001" +
    "\001\000\002\001\001\000\022\010\034\011\040\013\134" +
    "\014\042\015\046\016\047\017\044\020\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\141\010\024\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // properActualParams ::= expression 
            {
              ProperActualParams RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expression> eList = new ArrayList<Expression>();
					eList.add(e);
			    	RESULT = new ProperActualParams(eList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("properActualParams",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // properActualParams ::= properActualParams FA expression 
            {
              ProperActualParams RESULT =null;
		int papleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int papright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProperActualParams pap = (ProperActualParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pap.eList.add(e);
			    	RESULT = new ProperActualParams(pap.eList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("properActualParams",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // actualParams ::= 
            {
              ActualParams RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualParams",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // actualParams ::= properActualParams 
            {
              ActualParams RESULT =null;
		int pap2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pap2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProperActualParams pap2 = (ProperActualParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ActualParams(pap2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualParams",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // callExpr ::= ID LP actualParams RP 
            {
              CallExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int apsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int apsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ActualParams aps = (ActualParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallExpr(id,aps);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primaryExpr ::= LP expression RP 
            {
              PrimaryExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new PrimaryExpr(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primaryExpr ::= callExpr 
            {
              PrimaryExpr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallExpr ce = (CallExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrimaryExpr(ce);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primaryExpr ::= ID 
            {
              PrimaryExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrimaryExpr(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primaryExpr ::= ST 
            {
              PrimaryExpr RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrimaryExpr(st);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // primaryExpr ::= BL 
            {
              PrimaryExpr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new PrimaryExpr(Boolean.parseBoolean(bl));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primaryExpr ::= NM 
            {
              PrimaryExpr RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(nm.contains("."))
				RESULT = new PrimaryExpr(Float.parseFloat(nm));
			else
				RESULT = new PrimaryExpr(Integer.parseInt(nm));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // multiplicativeExpr ::= primaryExpr 
            {
              MultiplicativeExpr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpr pe = (PrimaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pe;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // multiplicativeExpr ::= multiplicativeExpr MD primaryExpr 
            {
              MultiplicativeExpr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultiplicativeExpr me = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpr pe = (PrimaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MultiplicativeExpr(pe, 3, me);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // multiplicativeExpr ::= multiplicativeExpr DO primaryExpr 
            {
              MultiplicativeExpr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultiplicativeExpr me = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpr pe = (PrimaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MultiplicativeExpr(pe, 2, me);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // multiplicativeExpr ::= multiplicativeExpr TO primaryExpr 
            {
              MultiplicativeExpr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultiplicativeExpr me = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpr pe = (PrimaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MultiplicativeExpr(pe, 1, me);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // additiveExpr ::= multiplicativeExpr 
            {
              AdditiveExpr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpr me = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = me;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // additiveExpr ::= additiveExpr MO multiplicativeExpr 
            {
              AdditiveExpr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AdditiveExpr ae = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpr me = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AdditiveExpr(me, 2, ae);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // additiveExpr ::= additiveExpr PO multiplicativeExpr 
            {
              AdditiveExpr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AdditiveExpr ae = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpr me = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AdditiveExpr(me, 1, ae);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // equalityExpr ::= additiveExpr 
            {
              EqualityExpr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpr ae = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ae;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // equalityExpr ::= equalityExpr NE additiveExpr 
            {
              EqualityExpr RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EqualityExpr ee = (EqualityExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpr ae = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new EqualityExpr(ae, 2, ee);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // equalityExpr ::= equalityExpr EQ additiveExpr 
            {
              EqualityExpr RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EqualityExpr ee = (EqualityExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpr ae = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new EqualityExpr(ae, 1, ee);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conditionalAndExpr ::= equalityExpr 
            {
              ConditionalAndExpr RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EqualityExpr ee = (EqualityExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ee;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditionalAndExpr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conditionalAndExpr ::= conditionalAndExpr LA equalityExpr 
            {
              ConditionalAndExpr RESULT =null;
		int caeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int caeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConditionalAndExpr cae = (ConditionalAndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EqualityExpr ee = (EqualityExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConditionalAndExpr(ee , 1, cae);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditionalAndExpr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= conditionalAndExpr 
            {
              Expression RESULT =null;
		int caeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalAndExpr cae = (ConditionalAndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cae;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression LO conditionalAndExpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int caeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalAndExpr cae = (ConditionalAndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expression(cae,1,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // returnStmt ::= RETURN expression SM 
            {
              ReturnStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnStmt(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // whileStmt ::= WHILE LP expression RP statement 
            {
              WhileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStmt(e,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifStmt ::= IF LP expression RP statement ELSE statement 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStmt(e,s,s1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ifStmt ::= IF LP expression RP statement 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStmt(e,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignStmt ::= ID AO expression SM 
            {
              AssignStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new AssignStmt(id,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignStmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // localVarDecl ::= type ID SM 
            {
              LocalVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LocalVarDecl(t,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("localVarDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= returnStmt 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStmt rs = (ReturnStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement(rs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= whileStmt 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStmt ws = (WhileStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement(ws);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= ifStmt 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmt is = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement(is);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= assignStmt 
            {
              Statement RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt as = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement(as);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= localVarDecl 
            {
              Statement RESULT =null;
		int lvrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocalVarDecl lvr = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement(lvr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements ::= 
            {
              Statements RESULT =null;
		ArrayList<Statement> stList = new ArrayList<Statement>();
			    RESULT = new Statements(stList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statements ::= statements statement 
            {
              Statements RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements sts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		sts.stList.add(st);
			    RESULT =  new Statements(sts.stList);;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block ::= LB statements RB 
            {
              Block RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements sts = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Block(sts);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= STRING 
            {
              Type RESULT =null;
		int string1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int string1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String string1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type(string1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int boolean1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolean1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String boolean1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type(boolean1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= FLOAT 
            {
              Type RESULT =null;
		int float1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int float1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String float1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type(float1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= INT 
            {
              Type RESULT =null;
		int int1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String int1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Type(int1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formalParam ::= type ID 
            {
              FormalParam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FormalParam(t,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParam",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // properFormalParams ::= formalParam 
            {
              ProperFormalParams RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<FormalParam> fpList = new ArrayList<FormalParam>();
			  	  fpList.add(fp);
			      RESULT = new ProperFormalParams(fpList);
			      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("properFormalParams",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // properFormalParams ::= properFormalParams FA formalParam 
            {
              ProperFormalParams RESULT =null;
		int pfpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pfpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProperFormalParams pfp = (ProperFormalParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParam fp = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pfp.fpList.add(fp);
			     RESULT = new ProperFormalParams(pfp.fpList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("properFormalParams",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formalParams ::= 
            {
              FormalParams RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParams",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formalParams ::= properFormalParams 
            {
              FormalParams RESULT =null;
		int pfpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProperFormalParams pfp = (ProperFormalParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FormalParams(pfp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParams",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // methodDecl ::= STATIC type ID LP formalParams RP block 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalParams fps = (FormalParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MethodDecl(t,id,fps,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // methodDecls ::= 
            {
              MethodDecls RESULT =null;
		ArrayList<MethodDecl> mdList = new ArrayList<MethodDecl>();
			      RESULT = new MethodDecls(mdList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // methodDecls ::= methodDecls methodDecl 
            {
              MethodDecls RESULT =null;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDecls mds = (MethodDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mds.mdList.add(md);
			     RESULT = new MethodDecls(mds.mdList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classDecl ::= error 
            {
              ClassDecl RESULT =null;
		ClassDecl.throwException();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= classDecl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDecl start_val = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // classDecl ::= CLASS ID LB methodDecls RB 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDecls mds = (MethodDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ClassDecl(id,mds);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

