package Parser;
import java.util.ArrayList;
import ParserObjects.*;
import java_cup.runtime.*;
	
/* Terminals (tokens returned by the scanner). */
terminal			SM, PO, MO, INT, FLOAT, BOOLEAN, STRING, TO, DO, FA, LB,LO,LA,EQ,NE,MD,AO, RB, LP, RP,STATIC,WHILE,RETURN,CLASS,IF,ELSE;
terminal String		ID, ST;
terminal String		NM;
terminal String		BL;
/* Non-terminals */

nonterminal	ClassDecl	classDecl;
nonterminal	MethodDecls	methodDecls;
nonterminal	MethodDecl	methodDecl;
nonterminal	FormalParams	formalParams;
nonterminal	ProperFormalParams	properFormalParams;
nonterminal	FormalParam	formalParam;
nonterminal	Type	type;
nonterminal	Block	block;	
nonterminal	Statements	statements;	
nonterminal	Statement	statement;	
nonterminal	LocalVarDecl	localVarDecl;	
nonterminal	AssignStmt	assignStmt;	
nonterminal	IfStmt	ifStmt;	
nonterminal	WhileStmt	whileStmt;	
nonterminal	ReturnStmt	returnStmt;	
nonterminal	Expression	expression;
nonterminal	ConditionalAndExpr	conditionalAndExpr;	
nonterminal	EqualityExpr	equalityExpr;	
nonterminal	AdditiveExpr	additiveExpr;	
nonterminal	MultiplicativeExpr	multiplicativeExpr;	
nonterminal	PrimaryExpr	primaryExpr;
nonterminal	CallExpr	callExpr;
nonterminal	ActualParams	actualParams;	
nonterminal	ProperActualParams	properActualParams;	

/* Precedences */
precedence left ELSE;
precedence left LO;
precedence left LA;
precedence left EQ, NE;
precedence left PO, MO;
precedence left TO, DO, MD;

/* The grammar */

classDecl ::= CLASS ID:id LB methodDecls:mds RB
			  {:RESULT = new ClassDecl(id,mds);:}
			  | error
			  {:ClassDecl.throwException();:};
			  
methodDecls ::= methodDecls:mds methodDecl:md
			  {:mds.mdList.add(md);
			     RESULT = new MethodDecls(mds.mdList);:} 
			  | {:ArrayList<MethodDecl> mdList = new ArrayList<MethodDecl>();
			      RESULT = new MethodDecls(mdList);:};
			  
methodDecl ::= STATIC type:t ID:id LP formalParams:fps RP block:b
			  {:RESULT = new MethodDecl(t,id,fps,b);:};
			  
formalParams ::= properFormalParams:pfp 
				{:RESULT = new FormalParams(pfp);:}
			  | {:RESULT = null;:};

properFormalParams ::= properFormalParams:pfp FA formalParam:fp
				{:pfp.fpList.add(fp);
			     RESULT = new ProperFormalParams(pfp.fpList);:} 
			  | formalParam:fp
			  	{:ArrayList<FormalParam> fpList = new ArrayList<FormalParam>();
			  	  fpList.add(fp);
			      RESULT = new ProperFormalParams(fpList);
			      :};
			  
formalParam ::= type:t ID:id {:RESULT = new FormalParam(t,id);:};

type ::= INT {:RESULT = new Type(Type.INT);:} | FLOAT {:RESULT = new Type(Type.FLOAT);:} 
		| BOOLEAN {:RESULT = new Type(Type.BOOL);:} | STRING {:RESULT = new Type(Type.STRING);:};
			  
block ::= LB statements:sts RB  {:RESULT = new Block(sts);:};

statements ::= statements:sts statement:st 
			  {:sts.stList.add(st);
			    RESULT =  new Statements(sts.stList);;:}
			| {:ArrayList<Statement> stList = new ArrayList<Statement>();
			    RESULT = new Statements(stList);:};

statement ::= block:b {:RESULT = new Statement(b);:}
			| localVarDecl:lvr {:RESULT = new Statement(lvr);:}
			| assignStmt:as {:RESULT = new Statement(as);:}
			| ifStmt:is {:RESULT = new Statement(is);:}
			| whileStmt:ws {:RESULT = new Statement(ws);:}
			| returnStmt:rs {:RESULT = new Statement(rs);:};
			

localVarDecl ::= type:t ID:id SM {:RESULT = new LocalVarDecl(t,id);:};

assignStmt ::= ID:id AO expression:e SM {:RESULT = new AssignStmt(id,e);:};

ifStmt ::= IF LP expression:e RP statement:s {:RESULT = new IfStmt(e,s);:} 
		 | IF LP expression:e RP statement:s ELSE statement:s1 {:RESULT = new IfStmt(e,s,s1);:};
			

whileStmt ::= WHILE LP expression:e RP statement:s {:RESULT = new WhileStmt(e,s);:};

returnStmt ::= RETURN expression:e SM {:RESULT = new ReturnStmt(e);:}; 

expression ::= expression:e LO conditionalAndExpr:cae {:RESULT = new Expression(cae,Expression.LA,e);:}
			| conditionalAndExpr:cae  {:RESULT = cae;:};
			
conditionalAndExpr ::= conditionalAndExpr:cae LA equalityExpr:ee {:RESULT = new ConditionalAndExpr(ee ,Expression.LO, cae);:}
			| equalityExpr:ee {:RESULT = ee;:};
			
equalityExpr ::= equalityExpr:ee EQ additiveExpr:ae {:RESULT = new EqualityExpr(ae,Expression.EQ, ee);:}  
			| equalityExpr:ee NE additiveExpr:ae {:RESULT = new EqualityExpr(ae,Expression.NE, ee);:}
			| additiveExpr:ae {:RESULT = ae;:};
			
additiveExpr ::= additiveExpr:ae PO multiplicativeExpr:me {:RESULT = new AdditiveExpr(me, Expression.PO, ae);:}  
			| additiveExpr:ae MO multiplicativeExpr:me {:RESULT = new AdditiveExpr(me, Expression.MO, ae);:}
			| multiplicativeExpr:me {:RESULT = me;:};
			
multiplicativeExpr ::= multiplicativeExpr:me TO primaryExpr:pe {:RESULT = new MultiplicativeExpr(pe, Expression.TO, me);:}  
			| multiplicativeExpr:me DO primaryExpr:pe {:RESULT = new MultiplicativeExpr(pe, Expression.DO, me);:}
			| multiplicativeExpr:me MD primaryExpr:pe {:RESULT = new MultiplicativeExpr(pe, Expression.MD, me);:}
			| primaryExpr:pe {:RESULT = pe;:};

primaryExpr ::= NM:nm {:
			if(nm.contains("."))
				RESULT = new PrimaryExpr(Float.parseFloat(nm));
			else
				RESULT = new PrimaryExpr(Integer.parseInt(nm));:}
			| BL:bl {:RESULT =  new PrimaryExpr(Boolean.parseBoolean(bl));:}
			| ST:st {:RESULT = new PrimaryExpr(st);:}
			| ID:id {:RESULT = new PrimaryExpr("id",id);:}
			| callExpr:ce {:RESULT = ce;:}
			| LP expression:e RP {:RESULT = new PrimaryExpr(e);:};
			
callExpr ::= ID:id LP actualParams:aps RP {:RESULT = new CallExpr(id,aps);:};

actualParams ::= properActualParams:pap2 {:RESULT = new ActualParams(pap2);:}
				| {:RESULT = null;:};
				
properActualParams ::= properActualParams:pap FA expression:e  
					{:pap.eList.add(e);
			    	RESULT = new ProperActualParams(pap.eList);:}	
					| expression:e 
					{:ArrayList<Expression> eList = new ArrayList<Expression>();
					eList.add(e);
			    	RESULT = new ProperActualParams(eList);:};
					
		
